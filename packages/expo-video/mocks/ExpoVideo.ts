/**
 * Automatically generated by expo-modules-test-core.
 *
 * This autogenerated file provides a mock for native Expo module,
 * and works out of the box with the expo jest preset.
 *  */

export type VideoContentFit = any;

export type CGVector = any;

export type FullscreenOptions = any;

export type VideoSource = any;

export type CMTime = any;

export type VideoThumbnailOptions = any;

export type VideoTrack = any;

export type SubtitleTrack = any;

export type AudioTrack = any;

export function isPictureInPictureSupported(): boolean {
  return false;
}

export function getCurrentVideoCacheSize(): any {}

export async function setVideoCacheSizeAsync(size: void): Promise<any> {}

export async function clearVideoCacheAsync(): Promise<any> {}

export type ViewProps = {
  player: VideoPlayer | undefined;
  nativeControls: boolean | undefined;
  contentFit: VideoContentFit | undefined;
  contentPosition: CGVector | undefined;
  allowsFullscreen: boolean | undefined;
  fullscreenOptions: FullscreenOptions | undefined;
  showsTimecodes: boolean | undefined;
  requiresLinearPlayback: boolean | undefined;
  allowsPictureInPicture: boolean | undefined;
  startsPictureInPictureAutomatically: boolean | undefined;
  allowsVideoFrameAnalysis: boolean | undefined;
  onPictureInPictureStart: (event: any) => void;
  onPictureInPictureStop: (event: any) => void;
  onFullscreenEnter: (event: any) => void;
  onFullscreenExit: (event: any) => void;
  onFirstFrameRender: (event: any) => void;
};

export function VideoView(props: ViewProps) {}

export type ViewProps = {
  tint: UIColor | undefined;
  activeTint: UIColor | undefined;
  prioritizeVideoDevices: boolean | undefined;
  onBeginPresentingRoutes: (event: any) => void;
  onEndPresentingRoutes: (event: any) => void;
};

export function VideoAirPlayButtonView(props: ViewProps) {}

export class VideoPlayer {
  play(player: void): any {}
  pause(player: void): any {}
  replace(player: void, source: (string | VideoSource) | undefined): any {}
  seekBy(player: void, seconds: number): any {}
  replay(player: void): any {}
  async replaceAsync(player: void, source: (string | VideoSource) | undefined): Promise<any> {}
  async generateThumbnailsAsync(
    player: VideoPlayer,
    times: CMTime[] | undefined,
    options: VideoThumbnailOptions | undefined
  ): Promise<VideoThumbnail[]> {
    return [];
  }
}

export class VideoThumbnail {}
